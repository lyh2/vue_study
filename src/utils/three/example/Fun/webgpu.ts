
export class WebGPUBase{
    public _options:any;
    public _webgpuStidyRenderer:WebGPUStudyRenderer;
    constructor(_options:any={}){
        this._options = _options;
        this._init();
    }
    _init(){
        // ÂàõÂª∫canvas
        const canvas = document.createElement("canvas");
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        this._webglStudyRenderer = new WebGPUStudyRenderer({canvas:canvas});
        this._webglStudyRenderer.start();
        this._options.dom.appendChild(canvas);
    }
}

class WebGPUStudyRenderer{
    // API Data Structures 
    adapter:GPUAdapter;
    device:GPUDevice;
    queue:GPUQueue;

    // Frame Backings 
    context:GPUCanvasContext;
    colorTexture:GPUTexture;
    colorTextureView:GPUTextureView;
    depthTexture:GPUTexture;
    depthTextureView:GPUTextureView;

    // resources
    positionBuffer:GPUBuffer;
    colorBuffer:GPUBuffer;
    indexBuffer:GPUBuffer;
    vertModule:GPUShaderModule;
    fragModule:GPUShaderModule;
    pipeline:GPURenderPipeline;

    commandEncoder:GPUCommandEncoder;
    passEncoder:GPURenderPassEncoder;



    
    constructor(_options={}){
        this._options=_options;
        this._initWGSL();
        this._initData();
    }

    _initWGSL(){

        // üü¶ Shaders
        this.vertWgsl = `
        struct VSOut {
            @builtin(position) Position: vec4<f32>,
            @location(0) color: vec3<f32>,
        };

        @vertex
        fn main(@location(0) inPos: vec3<f32>,
                @location(1) inColor: vec3<f32>) -> VSOut {
            var vsOut: VSOut;
            vsOut.Position = vec4<f32>(inPos, 1.0);
            vsOut.color = inColor;
            return vsOut;
        }`;

        this.fragWgsl = `
        @fragment
        fn main(@location(0) inColor: vec3<f32>) -> @location(0) vec4<f32> {
            return vec4<f32>(inColor, 1.0);
        }
        `;
    }


    _initData(){

        // üåÖ Renderer ÂàõÂª∫‰ΩçÁΩÆÁºìÂÜ≤Âå∫
        // üìà Position Vertex Buffer Data
        this. positions = new Float32Array([
            1.0, -1.0, 0.0,
        -1.0, -1.0, 0.0,
            0.0,  1.0, 0.0
        ]);

        // üé® Color Vertex Buffer Data È¢úËâ≤ÁºìÂÜ≤Âå∫
        this. colors = new Float32Array([
            1.0, 0.0, 0.0, // üî¥
            0.0, 1.0, 0.0, // üü¢
            0.0, 0.0, 1.0  // üîµ
        ]);

        // üìá Index Buffer Data Á¥¢ÂºïÁºìÂÜ≤Âå∫
        this.indices = new Uint16Array([ 0, 1, 2 ]);

    }

    /**
     * ÂºÄÂêØÊ∏≤ÊüìÂºïÊìé
     */
    async start(){
        if(await this._initializeAPI()){
            this.resizeBackings();
            await this.initializeResources();
            this.render();
        }else{
            console.error("Try using any chromium browser's canary build and go to <code>about:flags</code> to <code>enable-unsafe-webgpu</code>.</p>");
        }
    }

    async _initializeAPI():Promise<boolean>{
        try{
            // WebGPU ÂÖ•Âè£
            const entry:GPU = navigator.gpu;
            if(!entry){
                return false;
            }
            // Áâ©ÁêÜËÆæÂ§áÈÄÇÈÖçÂô®
            this.adapter = await entry.requestAdapter();
            // ÈÄªËæëËÆæÂ§á
            this.device  = await this.adapter.requestDevice();
            // queue ÈòüÂàó
            this.queue = this.device.queue;

        }catch(e){
            console.error("ÂºÇÂ∏∏:",e);
            return false;
        }
        return true;
    }

    /**
     * canvas ÈáçÊñ∞ËÆæÁΩÆÂ§ßÂ∞èÔºåÂ∏ßÁºìÂ≠òÂÖ≥ËÅîÁÇπ
     */
    resizeBackings(){
        if(!this.context){
            this.context = this._options.canvas.getContext('webgpu');
            // ÈÖçÁΩÆËÆæÂ§á‰∏ä‰∏ãÊñá‰ø°ÊÅØ
            const canvasConfig:GPUCanvasConfiguration = {
                device:this.device,
                alphaMode:'opaque',
                format:'bgra8unorm',
                usage:GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC
            };
            this.context.configure(canvasConfig);
        }

        const depthTextureSesc:GPUTextureDescriptor ={
            size:[this._options.canvas.width,this._options.canvas.height,1],
            dimension:'2d',
            format:'depth24plus-stencil8',
            usage:GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
        };
        this.depthTexture = this.device.createTexture(depthTextureDesc);
        this.depthTextureView = this.depthTexture.createView();
    }
    /**
     * ÂàùÂßãÂåñËµÑÊ∫êÊ∏≤Êüì‰∏âËßíÂΩ¢(ÁºìÂÜ≤Âå∫ÔºåshadersÔºåpipeline)
     */
    async initializeResources(){
        // buffers 
        let createBuffer = (arr:Float32Array | Uint16Array,usage:number)=>{
            // align to 4 bytes
            let desc = {
                size:(arr.byteLength + 3) & ~3, // ËÆ°ÁÆó‰∏Ä‰∏™Êï∞ÁªÑ arr ÁöÑÂ≠óËäÇÈïøÂ∫¶ÔºåÂπ∂Â∞ÜÂÖ∂Âêë‰∏äÂØπÈΩêÂà∞ÊúÄÊé•ËøëÁöÑ 4 Â≠óËäÇËæπÁïå
                usage,
                mappedAtCreation:true,
            };
            let buffer = this.device.createBuffer(desc);
            const writeArray = arr instanceof Uint16Array ? new Uint16Array(buffer.getMappedRange()) : new Float32Array(buffer.getMappedRange());
            writeArray.set(arr);
            buffer.unmap();
            return buffer;
        };

        this.positionBuffer = createBuffer(positions,GPUBufferUsage.VERTEX);
        this.colorBuffer = createBuffer(colors,GPUBufferUsage.VERTEX);
        this.indexBuffer = createBuffer(indices,GPUBufferUsage.INDEX);

        // shaders 
        const vsmDesc:any ={
            code:this.vertWgsl
        };
        this.vertModule = this.device.createShaderModule(vsmDesc);

        const fsmDesc :any = {
            code:this.fragWgsl
        };
        this.fragModule = this.device.createShaderModule(fsmDesc);

        // Graphics Pipeline 

        /* Input Assembly
            dictionary GPUVertexAttribute {
                required GPUVertexFormat format;
                required GPUSize64 offset;

                required GPUIndex32 shaderLocation;
            };
            format, of type GPUVertexFormat
            The GPUVertexFormat of the attribute.

            offset, of type GPUSize64
            The offset, in bytes, from the beginning of the element to the data for the attribute.

            shaderLocation, of type GPUIndex32
            The numeric location associated with this attribute, which will correspond with a "@location" attribute declared in the vertex.module.
        */
        const positionAttributeDesc:GPUVertexAttribute={
            shaderLocation:0,// [[attribute(0)]]
            offset:0,
            format:'float32x3'
        };

        const colorAttributeDesc:GPUVertexAttribute={
            shaderLocation:1,// [[attribute(1)]]
            offset:0,
            format:'float32x3'
        };
        const positionBufferDesc:GPUVertexBufferLayout = {
            attributes:[positionAttributeDesc],
            arrayStride:4 * 3,// sizeof(float) * 3
            stepMode:'vertex',
        };
        const colorBufferDesc:GPUVertexBufferLayout ={
            attributes:[colorAttributeDesc],
            arrayStride:4 * 3,// sizeof(float) * 3,
            stepMode:'vertex',
        };

        // depth
        const depthStencil:GPUDepthStencilState ={
            depthWriteEnabled:true,
            depthCompare:'less',
            format:'depth24plus-stencil8'
        };
        // uniform data
        const pipelineLayoutDesc ={bindGroupLayouts:[]};
        const layout = this.device.createPipelineLayout(pipelineLayoutDesc);

        // shader stages
        const vertex:GPUVertexState ={
            module:this.vertModule,
            entryPoint:'main',
            buffers:[positionBufferDesc,colorBufferDesc]
        };

        // color/blend state
        const colorState:GPUColorTargetState={
            format:'bgra8unorm',
            writeMask:GPUColorWrite.ALL,
        };

        const fragment:GPUFragmentState={
            module:this.fragModule,
            entryPoint:'main',
            targets:[colorState]
        };
        // ÂÖâÊ†ÖÂåñ Rasterization
        const primitive:GPUPrimitiveState ={
            frontFace:'cw',
            cullMode:'none',
            topology:'triangle-list',
        };
        const pipelineDesc:GPURenderPipelineDescriptor={
            layout,
            vertex,
            fragment,
            primitive,
            depthStencil
        };
        this.pipeline = this.device.createRenderPipeline(pipelineDesc);
    }

    render=()=>{
        this.colorTexture = this.context.getCurrentTexture();
        this.colorTextureView = this.colorTexture.createView();
        this.encodeCommands();

        requestAnimationFrame(this.render);
    }

    encodeCommands(){
        let colorAttachment:GPURenderPassColorAttachment = {
            view:this.colorTextureView,
            clearValue:{r:0,g:0,b:0,a:1},
            loadOp:'clear',
            storeOp:'store'
        };

        const depthAttachment:GPURenderPassDepthStencilAttachment = {
            view:this.depthTextureView,
            depthClearValue:1,
            depthLoadOp:'clear',
            depthStoreOp:'store',
            stencilClearValue:0,
            stencilLoadOp:'clwar',
            stencilStoreOp:'store',
        };

        const renderPassDesc :GPURenderPassDescriptor={
            colorAttachments:[colorAttachment],
            depthStencilAttachment:depthAttachment,
        };

        this.commandEncoder = this.device.createCommandENcoder();
        this.passEncoder = this.commandEncoder.beginRenderPass(renderPassDesc);
        this.passEncoder.setPipeline(this.pipeline);
        this.passEncoder.setViewport(0,0,this._options.canvas.width,this._options.canvas.height,0,1);
        this.passEncoder.setScissorRect(0,0,this._options.canvas.width,this._options.canvas.height);
        this.passEncoder.setVertexBuffer(0,this.positionBuffer);
        this.passEncoder.setVertexBuffer(1,this.colorBuffer);
        this.passEncoder.setIndexBuffer(this.indexBuffer,'uint16');
        this.passEncoder.drawIndexed(3,1);
        this.passEncoder.end();

        this.queue.submit([this.commandEncoder.finish()]);

    }
}




